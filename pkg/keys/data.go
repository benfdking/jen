// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// keys/a/jwks.json
// keys/a/private.pem
// keys/b/jwks.json
// keys/b/private.pem
// keys/c/jwks.json
// keys/c/private.pem
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _keysAJwksJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xc9\x6e\xa3\x30\x00\x80\xe1\x7b\x9e\xc2\xe2\x3c\x48\x66\x77\x7a\x0b\x04\x07\x5a\x4c\x31\x4b\x92\x66\x34\x42\x61\x6b\xc1\x29\x24\x10\x60\x4c\xd5\x77\x1f\xb5\xd2\xa8\x97\xff\xf0\x1d\xff\x8f\x15\x00\x02\x2b\xf9\x20\x3c\x80\xdf\x2b\x00\x00\xf8\xf8\x2e\x00\x42\x29\x3c\x00\x61\x43\x37\xa6\xf0\xeb\x3f\xb1\x3b\xff\xc2\x30\xda\xfc\x58\xfb\x25\x9d\x9d\xd9\x6e\x72\x4b\x9c\xd7\x3b\xb4\xae\xc6\x31\x56\x97\xd2\xb1\xec\xfa\xa9\x32\x5e\x45\xdf\xd3\xb5\xe5\x7d\x18\x61\x32\x25\x73\x80\x89\x6b\x6f\xbc\x2a\x08\x76\x7a\x8b\x22\x2b\xf5\xc3\x2a\x5a\x13\x6b\x3e\xa1\xf2\x56\xbf\x49\x5e\x80\xf0\x56\x6b\xf5\xe8\x9e\xa9\xb9\x5c\xaf\x9d\xd1\x37\x7a\x43\x3c\xe8\xe7\xb8\x21\x12\x3e\x75\x01\x96\x9e\x6f\xb0\x22\x34\x5c\xc4\xf3\x19\x57\x0e\xd5\x21\x0e\xde\x2f\x8b\x59\xec\x3a\x99\x87\x45\x63\xd2\xad\xe9\x2a\x27\x1e\x6a\x7c\x17\x3f\x11\xf6\x92\xb6\xdc\x74\x18\x24\x87\xb5\x38\x75\xc7\x4b\x1f\x16\xa9\xd6\xd8\xf8\x31\xfc\x4b\xde\xba\x73\x03\x4f\xfb\x79\x2c\x6b\x78\xef\x53\xb7\xdd\x4a\x91\x51\x12\x98\x26\x8e\x3b\x31\x32\x5c\x29\xd9\x4b\xd8\x9b\x07\x5d\xee\x2d\x34\x6e\xa7\x7c\xef\x73\xf7\x39\xed\xa9\x83\x8b\x75\xa0\xf0\xc0\xa6\x53\x25\xc6\x96\xa7\xb6\xd1\xb5\x19\x7a\x28\x19\xb1\xfa\x98\xa7\x15\x82\x16\x65\xb5\xf8\xd2\xbb\x76\x2e\x67\x30\x4b\x33\x26\xc9\xa8\x45\xb7\xa3\xe5\x47\xb6\xcc\xd0\xe2\x1c\x72\x65\xee\x4a\x29\x4b\x90\x4a\x0a\x33\x57\x34\xff\x02\x95\x43\x39\x25\x8d\x38\xc6\x47\x93\x0a\xdf\x8f\x3f\x57\x00\xfc\x59\x7d\xfe\x0b\x00\x00\xff\xff\x42\x80\x21\xaa\xaa\x01\x00\x00")

func keysAJwksJsonBytes() ([]byte, error) {
	return bindataRead(
		_keysAJwksJson,
		"keys/a/jwks.json",
	)
}

func keysAJwksJson() (*asset, error) {
	bytes, err := keysAJwksJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/a/jwks.json", size: 426, mode: os.FileMode(493), modTime: time.Unix(1607881732, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keysAPrivatePem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xa7\x12\xac\x5a\x02\x85\x61\xcf\x53\x1c\x4f\x4d\x91\x93\x18\x41\x6c\xe8\x66\x93\xb3\x23\xe7\xd8\x84\x86\xa7\x9f\x9a\x73\xed\x5d\x76\x99\xdf\x7d\xff\xf9\xff\x04\xf9\xa5\x19\x7f\x1c\x97\xff\x63\x39\x5a\xc0\x7b\xf2\x9f\x8f\x1c\xff\x7d\x20\xa0\x69\xf2\x5c\x6b\x02\xcf\x7f\x44\xde\x96\xf9\x59\xce\x64\xcd\x5f\x7d\xb5\xde\x51\x71\x61\x22\x8f\x7c\x4a\x55\x94\xdb\x4f\xc5\xd4\xb0\xa1\xd3\xd4\x33\x7e\x0f\xd4\x3f\xfd\xcb\x52\x80\x26\xf3\x90\x5e\x59\xd6\x8b\x9e\x58\x57\x44\x0c\xa7\x72\x39\x20\x5e\x09\x5b\xae\x6d\x83\xe9\x16\xab\x48\xd4\x44\xbb\x7b\x46\xe6\x78\xcb\xa9\x87\xc1\x6c\x0c\x1c\xd2\xa9\xd7\x01\x4c\x49\x66\x4b\xc1\xcc\x15\x42\x2b\x60\x3b\x0f\x9c\xa6\x4a\xa5\xda\x34\xaa\x58\xe3\xf0\x08\xc5\x6b\xc6\x6f\xa7\xe8\x04\x5b\x12\x34\x22\xb9\x1d\xea\x7e\x79\x1f\xd0\xc7\xc8\x74\x0b\x6a\x8f\x82\x90\x83\xcf\x39\x1a\x36\xa7\x80\x10\xaa\x93\x95\xb7\xf3\x03\xcd\x9c\x76\x68\x12\x5c\x47\xd9\xa2\xfb\x86\x68\x93\x84\xb9\x4c\x09\x50\xc4\x57\xb5\xb3\x07\xdf\xc5\x06\x01\xa6\xe8\xd7\x97\xc6\x37\x91\x3d\xa4\x33\x0f\x8c\x5b\x33\x21\x64\xb3\x55\xa5\xe0\x2c\xe2\xb6\x64\xfb\xac\x60\x4f\xd4\xc9\xc9\x5d\xba\xef\x86\x62\x8c\x47\xbe\x73\xa4\x62\x51\xd1\xee\x5b\x38\xde\x34\x39\xc7\x33\x34\x43\xb2\x1e\xc3\xd9\x89\x5d\x23\xd1\x70\x21\x19\xef\xd9\x47\x0d\x73\xe2\x9a\x4b\x2c\xf3\x59\x12\x14\x42\x4e\x50\xc6\x80\x12\x61\x79\xfa\x1d\x7c\x78\x91\x60\x6b\x12\x6f\xf3\x02\x3f\x6b\x02\x2f\x34\xf3\xb3\x5a\x44\xa0\x8f\xe2\x7a\xb5\x11\x24\x0e\xa3\xa9\xa7\x2f\x41\xe9\x91\x45\x18\x79\x18\x8f\x95\xb3\xef\xac\xf3\xad\x66\x8f\x76\x9d\x3f\x31\xd1\x71\x81\x39\x05\x6c\x65\x9f\x4b\x7b\x23\x9c\x6a\xaf\x5f\xd4\x4b\x16\xb1\x77\x88\xd5\x30\x20\x32\x4f\xa5\xdc\x5a\x65\x5f\x0a\x12\x6d\x3a\xec\x30\x7d\xdd\x2e\x69\x59\xd1\x8a\x81\xb6\x53\x43\xe7\x71\xd1\xc8\xc4\x00\x13\xcd\xf3\x26\xee\x46\x12\xd5\x80\xf0\xee\xef\xbc\x54\x4a\x6c\x13\x05\x14\x0e\x3f\x13\x74\x51\x2f\xb7\xef\xc3\x09\x1d\x01\xc5\x88\x8b\x67\xe2\x8c\x23\xed\x4f\x72\x1c\x08\x19\x7e\x26\x71\xb1\x3f\xb1\x78\x03\x4d\xb9\xcb\xfc\x2d\x97\xe5\x80\xc5\x80\xf0\x1d\x74\x30\x67\x68\xca\x44\x3e\x28\xc4\xce\x74\xec\x28\x72\x8b\xa9\xc1\x42\x37\x98\xd4\x90\xd8\xd6\x5c\xdb\xd7\x93\xaf\xd3\x11\x78\x2d\x25\xdd\x3e\xd0\x41\xcd\xb7\x75\xe4\xb8\x43\xfa\x44\x47\x8f\xff\x02\xc1\x81\x24\x5a\xfd\x85\xa3\x6f\xd7\xad\x4d\x80\x3a\x20\x60\xae\x7b\xe9\xcb\x56\x1d\xad\xc1\x88\xfa\x5a\x02\xbd\x97\x34\xbc\x38\x22\xae\x45\x3d\xbe\x0e\x4b\x0c\xb0\xfe\x20\x9b\x17\x5b\xf4\x77\x5b\xfa\x50\x22\x31\xfc\x33\xcb\x62\x1d\xcb\xfc\x23\xfb\xe2\x6e\x0d\xf4\xe5\x66\x5a\x45\xbe\x96\x58\xa2\x7f\x26\xe2\x57\x78\xba\x53\xfb\x7e\x98\x21\xbe\xde\xfb\xb4\x39\x11\xb0\xd6\xa3\x35\x48\xc4\xea\x51\x08\x87\x7f\x97\xff\x66\x60\x83\xfb\xf4\xc7\xa8\x3d\x79\x5d\x39\x6b\x7f\x31\x2e\x39\xa3\xcd\x93\xd5\x4c\x8f\xd5\xc5\x8e\x8c\x29\x4c\x4e\x83\x6b\xeb\xbe\x04\x73\x44\x68\x4a\x3d\xfb\x6d\x55\x77\x9e\x20\x53\xd1\x12\xed\xcb\x21\xdb\xcd\xa5\xb3\xb3\x8e\xa8\x8f\x72\x96\xd5\x94\xf2\x61\x32\x9e\x12\xee\xcd\xc8\x8d\xef\x8f\x21\x9d\x88\xe3\xa9\x34\x51\x47\x0a\x70\x67\xf7\x9f\xe2\xdb\xc0\x3b\xa8\x74\xfa\x2b\xda\x7a\x38\x24\xbf\xdd\x36\x1e\x71\x89\x52\xfe\x1a\x52\x56\x10\x00\x6e\xea\x73\x46\x68\xc9\x64\xb6\x02\xf6\xf5\xcc\x72\x49\xfd\xc8\x65\x69\x34\x25\x0a\xb6\xcc\xad\x6d\x71\x5a\x13\xe8\x31\x4e\x64\x5b\xfb\x3c\x66\xbf\xeb\x49\x14\x1b\x22\x1c\x58\x67\x34\x67\x18\xa3\x17\xb2\xec\xbe\xba\x28\x81\xdc\xe6\x54\xb2\xfa\x81\x24\xbc\x2f\x9a\xd7\xad\xf3\x01\xc3\x0f\xfe\x64\x70\x53\x9d\x10\x92\x18\x45\x23\x22\x65\x1a\x6b\xdd\xe9\xcd\xb4\x64\xf1\x9f\x7d\xf5\x2d\x5f\xa6\x9e\xeb\x67\x99\x59\x0d\x3b\x4b\xe8\x8b\x75\x2c\x8c\x54\xd2\xf2\x25\x0e\x4f\xd3\x92\x22\x92\x70\x33\x2f\x66\x14\x20\x02\x87\x7b\x32\xec\x83\x5a\x57\x81\x6d\xcf\x84\xc9\x79\x2c\xbd\x21\x3f\xae\xa4\x98\x50\x1a\x03\xff\x77\xe5\x5f\x6d\xf5\xd7\x76\xf9\x6c\x2e\xab\xca\x36\x40\xee\xbd\xb3\x56\x2a\xca\xdd\xf3\xf8\x41\xd9\xc5\x24\xdf\x9d\xf8\x4c\x8b\x1d\x11\xf4\xa0\xba\xa3\x3b\xf0\x15\x2a\x63\x16\xde\x58\xc1\x81\x07\xdd\x63\x98\x3e\x78\x9a\x5b\xcb\xde\x78\x26\x52\xed\xda\x31\xa6\x67\x0e\x2e\x90\x1c\x58\xa1\xa1\x04\x56\x54\x10\x6e\x47\x52\x22\x5c\x21\xdb\xcd\x94\x83\x67\xb6\x3f\x42\x2d\xca\xc3\xda\x15\xc7\xce\x98\x34\x2f\x14\x85\xcd\x7c\x1b\x5c\x79\x66\xcc\x57\x41\x1b\x3c\xac\xbb\x9c\x91\x80\xc1\x22\xb4\xd7\x33\x8f\x03\x7f\xc9\xf7\xe9\xb4\x02\x42\x9b\x62\x77\x10\x0e\xc1\xe9\xee\x2b\x6b\xfc\xf3\x32\xda\xa4\xe8\xe1\x4e\x85\x9f\xed\x29\xef\x02\xcd\xee\x24\x15\x5c\xd2\x13\xb2\xc8\xcc\xba\xe6\x0d\xbd\x43\x44\x2e\x50\x9c\x17\x17\xbb\x4c\x4f\xe5\x98\x82\xaa\x79\x95\x15\x57\x0c\x04\xfa\x42\x61\xd3\xb1\xb1\x23\x30\x52\xbc\x6c\xb1\x9c\x8d\x30\x42\xc6\xf0\xd7\x9a\xec\x9a\x70\x39\x84\xe5\xa7\x25\x14\x39\x47\xc1\xcf\x2f\xfe\x43\xb9\xdf\xeb\x8a\xf4\x6e\xa0\x42\x97\x84\x09\x3a\x8e\x50\x96\xe9\xf8\xef\x75\x39\x32\x1f\x77\x8c\x13\x35\x8a\x27\xfc\x76\x39\x7d\xcb\xee\x5e\x75\x09\xed\x3b\x6d\x95\x41\xf6\x26\xe4\xde\x1e\x27\x38\x6b\xcd\x3c\xed\x45\xb3\xf3\xbc\x11\x0d\x7d\x73\x22\x89\x76\xab\x37\x7a\xf5\x61\x4a\xea\x3b\x4c\x66\x7f\x90\x97\x66\xe8\xa4\xa6\x50\xb6\x8f\xdd\xfd\x46\x12\x8d\xeb\x37\x74\x33\x7e\x21\x36\xa6\x9b\x53\xba\x1e\x98\xc2\xa2\x57\x5f\x46\x2a\x9e\x91\x64\x91\xce\xdf\x37\xe7\x59\x8f\x4b\x17\x98\x96\x55\x2b\x34\x16\xfb\x63\x84\xd9\xff\x42\x7f\x49\x91\x0d\xe9\xdf\xa9\xf9\x5f\x00\x00\x00\xff\xff\xb3\x4d\xb4\x1d\x8b\x06\x00\x00")

func keysAPrivatePemBytes() ([]byte, error) {
	return bindataRead(
		_keysAPrivatePem,
		"keys/a/private.pem",
	)
}

func keysAPrivatePem() (*asset, error) {
	bytes, err := keysAPrivatePemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/a/private.pem", size: 1675, mode: os.FileMode(493), modTime: time.Unix(1607881732, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keysBJwksJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xc1\x6e\xa2\x40\x00\x80\xe1\xbb\x4f\x31\xe1\xbc\x24\x8a\x83\x94\xde\x06\x0b\x28\x54\x2a\x83\x23\x96\xcd\x86\x08\x08\x8e\x0c\x20\xa0\x30\x63\xd3\x77\xdf\xd4\x64\xb3\x97\xff\xf0\x1d\xff\xaf\x09\x00\x52\x79\x12\xbd\xf4\x0a\x7e\x4f\x00\x00\xe0\xeb\x59\x00\xa4\x93\xf4\x0a\x24\xe4\x23\x43\xfa\xf5\x8f\xca\x9b\xf8\x41\x1c\xa0\xff\x56\xff\x88\x12\x2e\xfd\x6a\x8d\xd7\x77\xd5\xf5\x28\xbd\xc6\x89\x16\x4e\x4d\xec\x3e\x48\xa5\x04\x3b\xeb\x44\x7d\x96\x1e\x71\xd7\xcc\x53\xc5\x4b\x53\x5c\x84\xd5\x05\x1a\xf5\x07\x0f\xcf\x7b\x72\x8c\x3f\xd5\x30\x9b\x2f\xc8\x0b\xfe\x80\xab\xac\xe5\x99\x27\x1f\x72\xa4\xbd\xb9\x34\x7a\x39\x37\xcd\x61\x0b\xdd\x64\x34\xde\x34\x6e\xa4\x8d\x6e\x47\x8f\x19\xe1\x5b\xef\x10\x5c\x7b\xeb\xa0\xb6\x78\x33\x50\xd6\xc7\x45\xec\xb7\xe7\x4b\xf7\xb9\xb7\x90\xfa\x20\x25\xbc\xb4\xc7\x28\x2a\xcd\xac\x22\x85\xb2\x89\xe4\x71\xbd\x12\xf3\x65\xa7\x0b\xfd\x3d\xbc\xe7\x85\x4d\x13\xbe\x5e\x74\x63\xd7\xba\xed\x1c\x96\xf2\xcd\xd4\xb3\x32\xaf\xe5\x61\x91\x27\x36\xe6\x37\xd9\x51\x02\xb6\x67\x0b\x41\xf7\xce\xd0\x13\xcd\x78\x8f\xd5\xac\x38\xdf\xec\xad\x9f\x70\xa6\x39\x94\x07\x2b\x2e\x17\x24\x3d\xc2\x01\xad\x18\x6c\x3d\xa6\xd7\x71\x80\xab\x60\x1a\x05\xc9\xae\x08\xa9\xe8\xa3\x6a\xa6\x52\x23\x57\x32\xd8\x15\x57\x86\xd8\x66\x6b\xf2\x74\xb8\xa2\x5a\x9f\x11\xa6\xe6\xa6\x48\xe9\xf0\x70\x2c\xce\xe1\x34\xb6\x2e\x28\x67\xc3\xc0\x6c\x71\x6a\x96\xba\x51\x3a\xf7\xdd\xe8\x6d\xe0\x28\x3d\x1f\x7f\x4f\x00\xf8\x33\xf9\xfe\x1b\x00\x00\xff\xff\x70\xfc\xce\x32\xaa\x01\x00\x00")

func keysBJwksJsonBytes() ([]byte, error) {
	return bindataRead(
		_keysBJwksJson,
		"keys/b/jwks.json",
	)
}

func keysBJwksJson() (*asset, error) {
	bytes, err := keysBJwksJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/b/jwks.json", size: 426, mode: os.FileMode(493), modTime: time.Unix(1607881732, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keysBPrivatePem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\x37\x12\xab\x56\x00\x85\xe1\x9e\x55\xbc\x9e\xf1\x90\x05\x94\x5c\x72\xce\x92\xa0\x23\x07\x91\x33\xac\xde\xe3\x57\xfb\xb4\xa7\xf9\xbb\xef\x9f\xff\x06\x44\x59\xb5\xfe\x78\x3e\xf7\xc7\xf1\xd4\x37\x17\x88\x7f\x74\x31\xfa\xfb\x40\xa6\xaa\x8a\xe3\xa9\x02\x8e\xd3\x79\xce\x15\x39\xfc\xc3\xbb\xbd\xea\xa9\x3b\xa5\x5b\x4d\x33\x21\x29\xfd\x41\x45\x4f\x7f\xc2\x1e\xf7\x03\xa9\x68\xdc\x2e\x4b\xbc\x65\x24\x32\xdc\xca\x32\xaf\xfa\x40\x7d\x4b\x82\xc1\xbe\x3e\xf5\x3b\x4c\x90\x88\xfa\xe4\xc4\x2b\x64\x3c\x9b\x54\xf2\xf9\xca\x2d\xf8\x5b\x72\xb4\xa0\x37\x31\x53\x8f\xe3\xd7\x21\xf5\xf4\x04\x02\x7d\x81\x6c\x64\xe5\xf8\xc1\xc2\xcb\x81\xac\xaf\x3f\xad\xd2\x97\x9a\x3d\xf3\x68\xba\x15\xa9\x10\x77\xae\xdb\x25\x7a\x4b\x1c\xf5\x84\x3f\xb2\x9d\x93\x38\xfe\x89\x79\x1f\x56\xb8\x19\xc3\xa7\xaa\xdc\x04\xbf\xb0\x37\x6b\x7c\xf6\xb2\x92\x1b\x28\xbd\xd4\xd7\x72\x2e\xb3\x3e\x13\xe4\x0f\xde\x44\x36\xff\x95\x03\x7c\xbc\xca\x54\xf6\xae\x0d\xd6\x70\xbf\x7b\x77\xaf\xbb\x79\x6b\xc7\x1a\xd2\xc0\x40\xa8\xbc\xaa\x37\xd9\x71\xd3\xab\xa3\xb5\xe6\x82\x7c\xe5\x82\xab\x30\x4b\xc8\x83\x53\x3a\x72\xb6\x3a\x76\x40\x7c\xaf\xf7\xd1\xd8\x4f\x83\xea\xd3\xdc\x6b\xdc\x63\x54\x03\x4a\x3c\x27\x97\x6a\xea\xb8\xce\x74\xc4\x2b\x3b\x26\x6e\x60\xb1\xb0\xa3\xa0\x52\xbc\xb3\xe6\x78\x34\xe9\xba\x48\x14\x91\x5a\xae\xec\x8e\xa3\x93\xef\x62\xe4\x59\xf0\xd3\xf6\xe0\xb4\x4c\xf2\x54\x05\xce\xe5\x00\x37\xaa\x80\x73\x79\x6e\x9d\x3c\xcd\xe7\x79\x63\xf3\x1d\x0d\xaa\xc7\x1e\x6f\x8c\x3b\x0a\xaf\x55\x97\xc2\x5c\x1a\x92\xe6\x15\x09\x1d\x16\x29\x82\x0d\xee\x56\x7e\x29\xa8\xe7\x6f\xb4\xd2\x8f\x92\xa1\x7d\x9e\x57\x42\x55\x0f\xe1\xfb\x47\x32\x50\x49\x3c\xa2\x2d\x44\x95\x62\xcc\xdb\xe0\xaa\x6f\x99\x3c\x0b\x66\x59\xf3\xac\x9f\xe7\x1c\x1d\xc4\xcf\x2c\x05\x9a\x64\x47\x38\x81\x61\x6c\x70\x8a\x26\x4a\xc0\x9c\x3a\xfb\x39\x33\xa1\x1f\x0a\x71\x8d\xcb\xe5\x35\x15\x5a\x7d\xb2\x45\xf6\x27\xf6\x86\xd1\x5d\xb1\xdf\x3c\x34\x32\x71\xb7\xb4\x7b\x05\x1a\xe5\x0a\x36\x45\xd3\x81\x1e\xdd\x32\xd2\x2d\x57\x7d\xca\xeb\x33\xdb\xbb\xcc\x6b\xee\xaf\x0d\xba\xa3\x9b\xb8\x18\x2a\x45\x91\x60\x95\xe2\x7e\x8c\x01\x1f\x9d\x48\x48\xa2\x9c\x42\x48\xf5\x2e\x79\x75\x10\xbe\x3f\x18\xb7\x88\x55\x4a\x44\x41\x89\x61\x7a\x23\x15\xd6\xd5\xe2\x99\xed\xf3\x02\xe6\xeb\x41\x24\x14\x04\x3a\xf4\xd0\xd5\x76\x7a\x0f\xdc\x62\x31\x9e\xe7\x64\xe9\x2e\x8a\xac\xb7\x8b\x81\x8d\x88\xee\xf4\x88\x73\x9c\xa3\x7c\xb1\x8a\x80\x69\xd3\x88\xa3\x6c\x77\x07\x3e\x8a\x95\x21\xd7\x28\x72\x74\x2e\x40\x58\xc7\x08\xf3\x33\x69\xdc\x28\x03\xce\x22\x8e\x93\x27\xc8\xa6\xef\x05\x6e\x06\x94\xf0\x45\x3f\x89\xef\x6e\xe5\x8e\x9a\x14\x2e\x9a\xf0\x3b\xe4\xb7\x46\xd4\x8c\x96\xdc\x7f\xea\x45\x06\xcf\x60\x42\xa1\x50\xf8\x03\x21\x9f\xe2\x0f\xeb\x18\xcc\x55\x54\x5f\x50\x35\x43\x87\x2d\x3d\xb5\x3e\xcf\x26\xd6\x7c\xf7\xa9\x32\xec\x7d\x6e\xb1\x3d\x88\x01\x6a\x3a\xed\xd6\xda\xb9\xf7\x2d\x02\xdd\x9d\xef\x03\x72\x05\xc2\xb1\x99\x1a\x58\xe2\xa1\x33\x81\xf9\x84\x45\xf1\xbb\xe1\xcf\x02\xa7\x61\xea\xc1\xa5\x25\xbc\xe3\xbe\xd8\x10\xb6\xa6\x0e\x9b\x93\xbd\x8d\xb3\x66\x2c\xf6\x1c\xe4\x6f\xb1\x33\xb3\xd0\xcc\x7c\xf7\x92\xa4\x94\xec\xa3\x29\x28\x8f\xdb\xbf\x8c\xfb\x6e\x58\xbf\xc0\xa8\xc5\x7c\x2f\x50\x23\x80\x2f\xa2\x48\x8c\xad\x60\xed\xa5\xfd\xc8\x62\x0c\xb3\xa4\x49\x4b\x27\x13\x23\x42\xff\xca\xa1\x60\x77\x95\xfa\x44\xcc\x4b\x04\x6a\xe6\x3d\x79\x7c\xcd\x91\x1c\x35\xfb\x92\xc1\x3b\xa5\x84\xfb\x67\x12\xb5\xd3\x54\x27\x90\xbd\x43\xf5\x3b\x3e\x6d\x21\xfd\x90\xb5\x9f\xba\x38\x39\xcf\x25\x93\x20\x67\xa9\x61\xc7\x4c\x47\x93\xc7\x9e\xbc\x72\xd5\x97\x83\xb3\x6e\x2e\xa5\x07\xef\x1a\x2c\xb6\x04\xd6\x44\x95\x3b\x92\xe5\xdc\x28\x73\xe2\xf2\x63\xde\xb2\xaf\x56\x56\x6d\xcd\x38\xb9\x80\xa6\xf0\x21\x22\xd8\xd8\xef\x06\x32\xd2\x56\xcf\x70\xbd\xd1\x73\x9b\x99\xd4\xe5\xed\x05\x5b\x5b\x1e\xf1\xc0\x21\xbc\x40\x7e\x3d\xeb\xd0\xa1\x5c\x8d\x49\xf2\x1c\xc4\x71\xd2\x32\xc2\xc9\x1b\x9a\xa4\x0d\x38\x64\xca\x73\x46\xaf\xb4\x9f\xb6\x6e\xdc\x3b\x76\xc7\x55\x1b\x57\xda\xec\x11\x7f\x8d\x9d\xba\xfc\x8d\xce\x7e\x3c\xec\x87\x8e\xf2\x19\xc2\x39\x8a\x3a\x22\x23\xa3\x24\x5e\xb0\xd9\x37\x3c\xd1\xbf\x74\xa8\x30\x7d\xbf\x7d\xd0\x34\x31\x9a\x34\xcd\x71\xf5\x53\xac\xec\x6d\x32\x7c\x15\x81\xa3\x53\xb8\xc8\xd7\xbf\xcd\xb1\x71\xb3\xcc\x1b\x08\xb9\x13\xb5\x9d\xdc\x1e\x7d\xea\x52\x12\x67\xa8\x77\xc7\x2e\xd4\xee\x13\xc3\xea\xa9\x52\x93\xf0\xb3\x54\x61\x9d\xc1\x4d\x50\x99\x37\x85\x76\x2b\x10\xae\x40\x0d\x4c\x09\xec\x8b\x3c\xf7\xb1\x9a\x65\xed\xb8\xb4\xc4\xb1\x45\x37\x95\xef\xe1\x14\xf3\xb7\x3d\x43\x5f\xac\x41\x85\xfe\xed\x80\x05\x73\x44\x30\x7e\x0d\x34\x6e\x06\x9c\x87\xf9\xd6\xc8\xa4\x1b\xdb\x25\x89\x29\x73\xe3\x48\x8f\x4a\xd1\x7f\xf9\xc5\xd0\x65\x11\x29\x7b\x0c\xe7\x5c\x20\xc8\xad\x4e\x42\x02\x39\x4e\xa8\xab\x83\x0a\x84\x3e\xd1\xe9\xc9\x19\x74\xa2\x51\x9d\xda\xcf\x7c\xdf\x8f\xfa\x05\xb9\x49\xc5\xef\xd7\x18\x8d\xd2\x36\x6d\x9e\x8c\x5e\xe2\x7a\x14\x85\xf9\x05\x15\x8d\xac\x5d\xc1\x41\x5f\xeb\x40\x5d\x5f\x3f\x2d\x5d\xc4\x3a\x23\x7f\x92\xe6\xf0\xc0\x60\xa3\x35\x12\xfe\x98\xc5\xa4\xdf\xa0\xcf\xad\x39\x57\xc1\x33\xb0\x5d\x7e\x59\x45\xb7\xbe\x4b\x39\x7b\xe5\xc4\x8b\x4a\xf6\xb8\x81\xca\x5d\x54\x26\xe7\x60\xd5\x3d\x5d\x6f\x8c\x1d\x98\x0b\x29\x7c\x09\xbd\x7b\xfe\x2d\xc0\x78\x22\x30\x04\x85\x49\x92\x4c\x68\x12\xcb\xe2\x96\xb9\xb0\x16\xa8\xa0\xbf\xa4\x88\x96\xf0\xff\xd4\xfc\x1b\x00\x00\xff\xff\x4f\x2a\x0e\x08\x8b\x06\x00\x00")

func keysBPrivatePemBytes() ([]byte, error) {
	return bindataRead(
		_keysBPrivatePem,
		"keys/b/private.pem",
	)
}

func keysBPrivatePem() (*asset, error) {
	bytes, err := keysBPrivatePemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/b/private.pem", size: 1675, mode: os.FileMode(493), modTime: time.Unix(1607881732, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keysCJwksJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xc9\x6e\xa3\x30\x00\x80\xe1\x7b\x9e\xc2\xe2\x3c\x48\x24\x4e\x42\xe8\x8d\x2d\x2c\xa1\x18\xcc\x1a\x46\xa3\xa8\x74\x4c\x03\x4e\x09\xab\x21\x54\x7d\xf7\x51\x2b\x8d\x7a\xf9\x0f\xdf\xf1\xff\x58\x01\xc0\x51\xf2\xe8\xb9\x27\xf0\x7b\x05\x00\x00\x1f\xdf\x05\x80\x23\xdc\x13\xe0\x64\x5f\x56\xb8\x5f\xff\x89\x0e\x8f\x2f\xc4\x81\xfc\x63\xf5\x97\xb4\x95\xd2\x08\xee\xfb\xb0\x4f\x3c\x61\x9d\xec\xd7\xa7\x9b\x89\x16\xb5\xc4\x79\x6b\x4e\xaa\x2b\xcf\x08\xb3\xe7\x40\xaf\x2c\x6a\x39\x5d\xfe\xda\xed\xae\xd7\x2a\xd5\xcf\xbe\x2e\x54\x38\x88\xf8\x40\x8c\x9c\x3b\x4c\x77\x1e\xaf\x36\x57\x22\x07\xc9\x5d\x37\x48\x1c\xd9\x8f\xb9\x08\x5c\x5d\x54\xcb\x03\x69\x6f\x68\x8b\x2d\x92\x84\x5d\xaa\x94\xd0\x18\xad\x9b\x62\xee\x6b\x35\xb2\x73\x2d\x3a\xcd\x4e\xb5\x0e\xb1\x31\x5d\xe6\x65\xc0\x47\xb2\x20\xe4\xef\x2e\xba\xcf\x0b\x5d\x7c\x66\x28\xaf\x52\xdb\xd8\xd0\xbe\x28\x28\xe9\xfd\x71\x57\x11\xb8\x69\x3d\x3a\xa3\x2c\x99\x70\xc8\x32\x6a\xaa\xd3\xb1\xf7\xc2\xe3\x73\x7a\xc6\xc3\xfb\x7a\x96\x34\x66\xd3\x05\xc9\xa2\x60\x2f\x78\x29\x5f\x16\x68\xcd\x4d\x7c\xfb\x2b\x68\x23\x14\x29\x09\xc4\xac\xa8\x6b\xf6\x26\x69\x23\xb9\xb7\x39\x94\xaf\x5b\xc3\x3e\x6f\x32\x55\x12\xa1\x72\x72\x25\x3d\x8c\x59\x7d\x2a\x58\x70\xd1\x26\xdd\x96\x5e\x9a\x86\xf7\xf9\x70\x10\x84\x66\x12\xb2\x25\x8f\x0f\x05\x75\xdc\x72\x0b\x67\xfc\x2a\xb1\x75\x47\x36\x32\x3c\x74\xe6\xf4\x36\x5a\xbd\xe7\x53\x03\x25\x77\x8b\x6d\x9d\x62\xe4\x7d\xee\xfb\xf1\xe7\x0a\x80\x3f\xab\xcf\x7f\x01\x00\x00\xff\xff\x2b\x1d\x35\x9d\xaa\x01\x00\x00")

func keysCJwksJsonBytes() ([]byte, error) {
	return bindataRead(
		_keysCJwksJson,
		"keys/c/jwks.json",
	)
}

func keysCJwksJson() (*asset, error) {
	bytes, err := keysCJwksJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/c/jwks.json", size: 426, mode: os.FileMode(493), modTime: time.Unix(1607881732, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keysCPrivatePem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xb7\x12\xab\xda\x01\x85\xe1\x9e\xa7\x38\x3d\xe3\x21\x83\x28\x5c\x6c\xa2\x36\x39\xa7\x0e\x49\xe4\x2c\x10\xe9\xe9\x3d\x3e\xb7\xbd\xab\x5d\xcd\xdf\x7d\xff\xf9\xff\x04\x59\x85\xd6\x1f\xcf\x07\x7f\x1c\x0f\x46\x20\x90\xff\xe8\x72\xfa\xf7\x41\x4c\x08\xe5\xd9\x85\x02\x00\xba\x08\x5c\x19\x2c\xad\x30\xe3\xd6\xb0\xb1\xb1\x83\x13\x31\x4b\xe8\xfd\xd3\xbe\xc5\xc6\x7b\x2d\xcf\x43\xb4\xc0\x69\x7b\xbb\xe9\xcb\x2d\xec\xa0\xf1\x7d\xbd\xbf\x0c\x52\xd7\x6d\x22\xa7\xae\x8c\xb7\x9e\x1f\xa2\x3e\x17\x1a\x13\x95\x30\x0e\x2a\xce\x75\x01\xfc\x78\x92\xd5\x22\x0a\xb5\xeb\x2c\x7d\x4b\xe6\xc4\xe6\x51\x2c\xbd\x4d\x7b\xb0\x88\x83\x6f\x22\x34\x94\x8a\xfc\x60\x2f\x3c\xd9\x51\x0c\xb5\x97\x14\xea\xa7\xd1\x12\x81\xa7\x1e\xd8\x79\x6f\x9e\x52\xdc\xb6\xed\x32\x98\xec\xa2\xf8\x37\x4a\x77\xfb\xd5\x26\x9a\x4a\x76\x6b\x59\x76\xc5\xea\xfe\x98\xb6\xa0\x48\x64\x71\xba\xd3\xce\xe2\xc3\x0b\xf6\xac\x7b\x8a\x87\xb2\x3a\x81\x62\x26\xa9\xb7\x0d\xc4\xc9\x4b\xbb\xd6\xdd\x36\xe0\x70\xed\xf6\xee\x26\xbf\x29\x78\xce\x51\xff\xc1\xa5\x1f\xc5\x75\x85\xcf\x65\x25\x32\x8e\x7b\xc5\x4b\xbf\x62\x5a\x5e\x14\xa8\x69\x55\x4b\xc9\x4c\xe4\x39\x4a\xd0\x2d\x5e\x0e\xa2\x7d\xd4\xcb\xdd\xc7\xa4\x43\xd6\xf8\x7c\x9e\x51\x17\x0d\x36\x1c\x9f\x0f\x3c\xbb\x5f\xd1\xa3\xec\x0c\xc4\x6a\x68\xea\xf4\xde\xfc\x4e\x7c\x0b\x12\x50\x8f\xef\xf3\xa8\x7e\x70\x75\xdc\x4e\xb5\xe3\x09\xee\xb4\x51\xfe\x50\x17\x4a\xc0\x05\x02\x98\xa0\x00\x5c\xb1\x6d\x20\xa5\x04\x8f\xf4\xa5\x09\x7c\x86\x48\x04\x3d\xd3\x35\x7d\xbd\x6f\x89\x43\x1f\xd6\x44\x68\x41\xc2\xc6\xc7\xfa\x0e\x6c\x5a\x75\xc2\xf7\xe6\x59\x1c\x11\xe5\x2d\x2e\x24\x1a\xb5\xb5\x11\x94\x1f\xd1\x1d\x8c\xb8\x41\x1b\xea\x97\x66\x70\xe4\xe6\xea\xee\x77\x38\xa7\x0f\x80\x49\x59\x78\xd2\x48\x91\x6c\x3e\x6b\xcd\x8c\xa8\x50\x03\xae\xea\x14\xf3\x8b\x12\x8a\x1e\xbf\x7f\xfe\xaa\xef\x5e\x78\x52\x87\x30\x42\x8c\xb3\x4e\x17\x00\xfc\x85\x5c\x54\x23\x66\xe3\x7d\xbb\xea\xa5\xbd\x7d\x27\xd2\x76\x72\x3b\xaf\x63\x6c\x64\x20\x4d\x1d\x71\x18\x54\xe5\x94\x39\x56\x38\x66\xe2\x7d\xc8\x52\x11\x86\x72\xf3\x04\xa3\x78\x2c\x96\xbd\x95\x2e\x8b\xb4\xb9\x6a\xaf\xe0\x1e\xb6\x8a\x67\xd3\xd2\xef\xcc\x74\x7f\xd8\x67\x29\xf6\xbc\xf4\xb9\x44\x21\x25\x47\x29\xa6\x81\x27\xd9\xb8\x5e\x09\xa0\xbd\x82\x9e\xc7\x98\x8c\x84\x9a\xd0\x57\x79\x13\x9a\x88\xaf\xcb\xbd\x84\x7a\x17\x39\xaa\x39\x5e\x4f\xea\x37\x65\xd6\x45\x2d\xe3\xe7\x47\x9a\xa6\xc8\xfc\x44\x30\x9f\x6d\xeb\x33\x80\x8a\xb2\x97\xc2\x1a\xdc\x03\xb8\xf4\xc7\xa8\x85\x14\xf2\xf7\x58\x41\x24\x73\x59\x2c\xa1\x83\x1a\x4c\xaa\x00\x2c\x19\x53\xd7\x56\xb7\x24\x2a\x76\x94\x7a\xb6\xe7\x6e\x3d\x86\x2f\xc6\x5c\xa6\xf6\xd8\xac\x58\x6b\xab\xae\xde\x7f\xcf\xf4\xb6\xb6\xe1\x3b\xb8\x82\x36\x02\xe4\xe8\x92\x27\x21\xbb\xd2\xef\x5d\xc7\xc5\xa1\x86\x94\xc9\xbc\x3e\x75\xf6\x49\x06\x4e\x39\xc2\xbc\x7f\xf9\x76\x7b\x14\x89\x2e\xd8\x46\x69\x3d\x45\xcc\xae\xdb\x27\xa3\x1a\x8d\x7f\x11\x67\x4b\xed\x36\x62\x66\x78\x9d\x36\xf4\xbb\xf0\x6b\x6f\xca\x16\xfc\xd1\xa8\xe0\xc8\xb2\x69\x92\xa9\x48\xc5\x84\x6c\xd8\x6f\xe6\x10\xf3\x42\xae\x56\x8e\xe2\xab\xfc\x3c\xbd\x06\x7c\x2d\xe5\x9f\x62\x40\x21\x76\xfd\xa3\x75\x93\xf0\x3f\x0f\x78\xf2\x92\xb0\x55\x63\x7c\x8e\xf1\x0d\xd7\x97\x3c\xdc\x0f\xd5\x5f\x5e\x8e\x54\x0f\xb5\xf0\x6d\x0a\xab\x08\x5d\x86\x59\x24\xef\x0d\x71\x58\x3d\x67\x83\xb9\x79\x01\x69\x77\xc3\xb8\xd1\x34\xc7\xca\x69\xb1\xed\xe7\x03\x43\x0b\x69\x3a\xf4\xb7\x73\x0e\x35\x3e\x48\x47\x76\xee\xe7\x3e\x7d\xcd\x63\xcd\x0d\x91\x1f\x65\x52\xc1\x34\xee\x56\x1d\x3e\xe4\x43\xf5\x6b\x32\x88\x0e\x99\x45\x78\xd6\x3e\x8b\x6d\xd4\xf3\x2c\x8d\xe9\xf4\x9d\xd9\x1e\xa4\x61\xf5\x8d\x0b\x2c\x40\xcc\x62\x7e\x0d\xe9\x1e\x4c\x2a\xd0\x65\x99\x9b\x8b\x08\xcc\x6c\xe0\x7c\x6e\xe3\x19\xde\xa2\x86\x58\xd3\x25\x2f\x7b\x8b\x62\x4d\x1f\xae\x4e\x1d\x61\x34\x65\x7a\x7c\x63\xeb\x6c\xa0\x39\xef\x35\xe9\xad\xf0\x7d\x38\x2d\x59\x5b\x6e\x11\x15\xa8\xd5\x5c\xb1\x15\x76\xa0\xd3\x97\xad\x3a\xa8\xdc\x41\x2e\xb8\xd1\x55\x79\xbd\x3e\x60\x7c\xdc\x86\xc3\xdb\xe1\x9b\xcb\xcd\xa5\xd2\x79\x6a\xc5\x74\xef\x97\x1d\xa7\xa2\x9c\x63\x6b\x79\x0c\x66\x43\x37\x91\xad\x2f\x9e\xde\x2b\x3f\x70\xbf\x96\x51\xfa\x14\xd9\x78\x2d\xcc\xbc\x41\xa2\xae\xa8\x5f\x7e\x04\x47\x5d\x18\x47\xb8\xb2\x58\xa5\x32\xa8\x05\x25\x98\x82\x6d\x4e\xca\xa5\x90\xf2\xb4\xbd\xab\x32\x15\x3c\x89\x26\x27\xef\x83\x7a\x22\xf9\x84\xb2\x81\x7c\x5c\xab\x85\xd0\x39\x7a\xc1\xd9\x3d\x09\x30\x6b\x41\xa9\xf3\x49\x2f\x19\x5a\x52\xa6\xce\x4b\x63\xba\xbd\x9c\xaa\x52\xd9\xc9\x4e\x8a\xbd\xc2\x88\xa0\x3a\x70\x69\x32\x59\xc1\x25\x92\x4f\x8f\x22\x65\x08\x03\x76\x77\x31\xfa\x56\x42\xac\x7c\xc7\x0d\x6d\x6b\x49\x12\x4b\xe1\x62\x10\x50\x33\xee\x9d\xee\xad\xcf\xd4\xe4\x16\xa6\x9c\xd4\x10\x8a\xfc\xba\x30\xd8\x54\xca\x5e\x27\x8e\x81\x39\xdc\xc8\xb5\x60\x8f\x94\x0d\xff\x26\xdf\x2c\x89\xb2\xf3\x24\x5d\xe7\xb1\xc3\x5e\xd0\x9b\x8c\x73\x7e\xd0\xcf\xc9\xa9\x6b\x3a\x8b\x77\x29\x85\xb8\x72\x78\x0c\xf5\xdd\xca\x66\xf4\x4d\xd4\xa6\x21\x11\x3a\xd6\x53\xef\xa1\x2e\xb8\xe5\x5a\xc1\x10\x13\x3e\x9f\xa3\x12\x77\xa1\x45\xc4\x1c\x64\x41\xc8\xe3\x12\x3d\xd9\x84\x72\xd5\xc7\xb1\xce\x11\x4f\x3b\x34\x5b\x18\xd5\x2f\x47\xef\xc0\xc4\xe7\xe8\x46\xbc\x14\x7d\x3b\xca\xce\x6a\x9e\x18\xec\x0b\xfa\x56\x85\x3e\xc1\x3e\xfe\xa3\x56\xf6\x2b\x7a\x91\x05\x9a\xc6\xc2\x3a\xfe\x74\x2f\x32\x07\x3b\x97\x64\x85\xd4\x5e\x06\xd7\xfd\x17\xf9\xcb\x8a\x6c\x49\xff\xce\xcd\xff\x02\x00\x00\xff\xff\x17\x56\xb9\x95\x8f\x06\x00\x00")

func keysCPrivatePemBytes() ([]byte, error) {
	return bindataRead(
		_keysCPrivatePem,
		"keys/c/private.pem",
	)
}

func keysCPrivatePem() (*asset, error) {
	bytes, err := keysCPrivatePemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "keys/c/private.pem", size: 1679, mode: os.FileMode(493), modTime: time.Unix(1607881732, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"keys/a/jwks.json":   keysAJwksJson,
	"keys/a/private.pem": keysAPrivatePem,
	"keys/b/jwks.json":   keysBJwksJson,
	"keys/b/private.pem": keysBPrivatePem,
	"keys/c/jwks.json":   keysCJwksJson,
	"keys/c/private.pem": keysCPrivatePem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"keys": &bintree{nil, map[string]*bintree{
		"a": &bintree{nil, map[string]*bintree{
			"jwks.json":   &bintree{keysAJwksJson, map[string]*bintree{}},
			"private.pem": &bintree{keysAPrivatePem, map[string]*bintree{}},
		}},
		"b": &bintree{nil, map[string]*bintree{
			"jwks.json":   &bintree{keysBJwksJson, map[string]*bintree{}},
			"private.pem": &bintree{keysBPrivatePem, map[string]*bintree{}},
		}},
		"c": &bintree{nil, map[string]*bintree{
			"jwks.json":   &bintree{keysCJwksJson, map[string]*bintree{}},
			"private.pem": &bintree{keysCPrivatePem, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
